from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from datetime import datetime
import keyboards.reply_kb as rp
from data_base.database import is_user_in_database
from data_base.database import get_db
from data_base.models import User
from sqlalchemy.exc import IntegrityError
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import Message, CallbackQuery
class RegistrationStates(StatesGroup):
    name = State()
    birth_date = State()
    phone_number = State()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
registration_router = Router()


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@registration_router.message(F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def register(message: types.Message, state: FSMContext):
    async with get_db() as session:
        if await is_user_in_database(message.from_user.id, session):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        else:
            await state.set_state(RegistrationStates.name)
            await message.answer('–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –í–∞—à–µ –∏–º—è. üòä')


@registration_router.message(RegistrationStates.name)
async def register_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(RegistrationStates.birth_date)
    await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è, –ò–≤–∞–Ω! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. \n'
                         '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: –î–î.–ú–ú.–ì–ì–ì–ì.')


@registration_router.message(RegistrationStates.birth_date)
async def process_birthdate(message: types.Message, state: FSMContext):
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(birth_date=birth_date)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, {message.from_user.first_name}.\n"
                             f"–ò –Ω–∞–∫–æ–Ω–µ—Ü, –æ—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        await state.set_state(RegistrationStates.phone_number)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=rp.get_number)
    except ValueError:
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@registration_router.message(RegistrationStates.phone_number, F.contact)
async def register_number(message: types.Message, state: FSMContext):
    await state.update_data(phone_number=message.contact.phone_number)
    data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    name = data.get('name')
    birth_date = data.get('birth_date')
    phone_number = data.get('phone_number')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with get_db() as db_session:
        async with db_session.begin():
            new_user = User(id=message.from_user.id, name=name, birth_date=birth_date, phone_number=phone_number)
            db_session.add(new_user)
            await db_session.commit()

    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!",
                         reply_markup=ReplyKeyboardRemove())
    await state.clear()